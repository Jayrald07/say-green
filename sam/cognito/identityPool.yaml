AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Identity Pool for Say Green

Parameters:
  BucketName:
    Type: String

Resources:
  IdentityPoolStack:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: IdentityPoolSayGreen
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !GetAtt UserPoolClientStack.ClientId
          ProviderName: !GetAtt UserPoolStack.ProviderName
  
  UserPoolStack:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: UserPoolSayGreen
      EnabledMfas:
        - "SOFTWARE_TOKEN_MFA"
      MfaConfiguration: "ON"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: admin_only
            Priority: 1
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      AutoVerifiedAttributes:
        - "email"
      UsernameAttributes:
        - "email"
      UsernameConfiguration:
        CaseSensitive: true

  UserPoolClientStack:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !GetAtt UserPoolStack.UserPoolId
      ClientName: UserPoolClientSayGreen

  IdentityPoolUnauthenticatedAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: 
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPoolStack
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated

  IdentityPoolAuthenticatedAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: 
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPoolStack
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies: 
        - PolicyName: appSyncAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "appsync:GraphQL"
                Resource: !ImportValue AppSyncApiArn
        - PolicyName: bucketImageAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref BucketName
                    - /*

  IdentityPoolUnauthenticatedRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPoolStack
      Roles:
        unauthenticated: !GetAtt IdentityPoolUnauthenticatedAccessRole.Arn
        authenticated: !GetAtt IdentityPoolAuthenticatedAccessRole.Arn

Outputs:
  IdentityPoolId:
    Value: !Ref IdentityPoolStack
    Export:
      Name: IdentityPoolId
  UserPoolId:
    Value: !GetAtt UserPoolStack.UserPoolId
    Export:
      Name: UserPoolId
  UserPoolClientId:
    Value: !GetAtt UserPoolClientStack.ClientId
    Export:
      Name: UserPoolClientId